Diff from os161-filetables-1.99.08 to os161-filesyscalls-1.99.08.
To apply, run patch -p1 < thispatchfile in the top level directory
of the OS/161 tree.

diff -r bed1817e4048 -r c068f74d7670 CHANGES.syscalls
--- a/CHANGES.syscalls	Wed Sep 24 21:03:08 2014 -0400
+++ b/CHANGES.syscalls	Wed Sep 24 21:07:31 2014 -0400
@@ -7,13 +7,21 @@
 (Also see CHANGES.locks and CHANGES.)
 
 20140924 dholland	Version 1.99.08 of the system calls solutions released.
+20140919 dholland	Move uio_uinit to uio.c where it really belongs.
+20140916 dholland	Don't allocate char[PATH_MAX] on the kernel stack.
+20140822 dholland	Don't lock/use unseekable objects' offsets during I/O.
 20140822 dholland	Use separate locks for openfile offset and refcount.
+20140822 dholland	Updated the file syscall design notes.
+20140822 dholland	Tidied the file syscalls.
+20140822 dholland	Updated the filetable design notes.
 20140822 dholland	Rework the filetable abstraction completely.
 20140822 dholland	Rework the openfile abstraction completely.
 20140822 dholland	Don't include syscall-level code in the file tables.
 20140822 dholland	Split file.h -> openfile.h and filetable.h.
 
 20140123 dholland	Version 1.99.07 of the system calls solutions released.
+20130531 dholland	Adjust to base system addition of struct proc.
+20100108 dholland	Split out design notes for file syscalls.
 20100108 dholland	Split out design notes for filetables.
 20100106 dholland	Split solution code into filetables, filesyscalls,
 			procsyscalls, exec, and scheduling patches.
@@ -36,6 +44,7 @@
 20030612 dholland	Fix up some obsolete comments.
 
 20030310 dholland	sol2-1.08 released. (1.07 skipped.)
+20030309 dholland	Fix read and write syscalls to check O_RDONLY et al.
 20030129 dholland	Add prefix to struct filetable members for consistency.
 20030129 dholland	Add prefix to struct openfile members for consistency.
 
@@ -44,6 +53,7 @@
 
 20020917 dholland	sol2-1.05 released.
 20020916 dholland	Created this changelog from CVS log data.
+20020328 dholland	Fix missing lock_release calls on error.
 
 20020309 dholland	sol2-1.04 released.
 20020309 dholland	Design docs for sol2.
diff -r bed1817e4048 -r c068f74d7670 design/filesyscalls.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/design/filesyscalls.txt	Wed Sep 24 21:07:31 2014 -0400
@@ -0,0 +1,103 @@
+Design notes for file system calls (part of the system call solution set)
+-------------------------------------------------------------------------
+
+This part of the solution set covers the following:
+
+   - File system calls: open, read, write, lseek, close, dup2
+   - Current directory calls: chdir, __getcwd
+
+
+The system calls are actually called from arch/mips/mips/syscall.c.
+Pointer arguments are cast to userptr_t or const_userptr_t in order to
+use the compiler to help prevent accidentally dereferencing user-
+supplied pointers without calling copyin/copyout/copyinstr/copyoutstr
+properly. const_userptr_t, where suitable, also helps protect against
+getting the argument order for these functions wrong.
+
+The in-kernel prototypes for the system call functions are defined in
+include/syscall.h. They use the same error reporting/return value
+handling as the rest of the kernel: the return value of the function
+is an error code (0 for success) and any additional integer return
+value to be returned from the system call (such as with read or write)
+is handed back as an additional pointer argument.
+
+The actual file syscall implementations live in the new file
+userprog/file_syscalls.c.
+
+
+open
+----
+sys_open needs to:
+   - check for invalid flags
+   - copy in the supplied pathname
+   - open the file (use openfile_open)
+   - place the file in curproc's file table (use filetable_place)
+
+read
+----
+sys_read needs to:
+   - translate the file descriptor number to an open file object
+     (use filetable_get)
+   - lock the seek position in the open file (but only for seekable
+     objects)
+   - check for files opened write-only
+   - cons up a uio
+   - call VOP_READ
+   - update the seek position afterwards
+   - unlock and filetable_put()
+   - set the return value correctly
+
+We explicitly don't use the seek position or lock anything for
+non-seekable objects. This avoids holding a useless lock and avoids
+unwanted behavior on many devices, e.g. the console: if you hold a
+lock while waiting for console input, background jobs can't generate
+console output.
+
+write
+-----
+sys_write is the same as sys_read except that it writes.
+
+close
+-----
+sys_close needs to:
+   - validate the fd number (use filetable_okfd)
+   - use filetable_placeat to replace curproc's file table entry with NULL
+   - check if the previous entry in the file table was also NULL
+     (this means no such file was open)
+   - decref the open file returned by filetable_placeat
+
+lseek
+-----
+sys_lseek needs to:
+   - translate the file descriptor number to an open file object
+     (use filetable_get)
+   - check for unseekable objects
+   - lock the seek position in the open file
+   - compute the new seek position (maybe calling VOP_STAT to get the
+     object size)
+   - reject invalid (negative) seek positions
+   - update the seek position
+   - unlock and filetable_put()
+
+dup2
+----
+sys_dup2 needs to:
+   - validate the passed-in new fd (use filetable_okfd)
+   - check explicitly for oldfd == newfd
+   - translate old the file descriptor number to an open file object
+     (use filetable_get)
+   - incref the open file
+   - call filetable_put() before changing the table
+   - replace curproc's file table entry for newfd (use
+     filetable_placeat)
+   - decref the open file that was there before, if any
+   - return newfd
+
+chdir
+-----
+sys_chdir copies in the pathname and calls vfs_chdir.
+
+__getcwd
+--------
+sys___getcwd sets up a uio, then calls vfs_getcwd.
+
diff -r bed1817e4048 -r c068f74d7670 kern/arch/mips/syscall/syscall.c
--- a/kern/arch/mips/syscall/syscall.c	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/arch/mips/syscall/syscall.c	Wed Sep 24 21:07:31 2014 -0400
@@ -30,10 +30,12 @@
 #include <types.h>
 #include <kern/errno.h>
 #include <kern/syscall.h>
+#include <endian.h>
 #include <lib.h>
 #include <mips/trapframe.h>
 #include <thread.h>
 #include <current.h>
+#include <copyinout.h>
 #include <syscall.h>
 
 
@@ -99,6 +101,8 @@
 
 	retval = 0;
 
+	/* note the casts to userptr_t */
+
 	switch (callno) {
 	    case SYS_reboot:
 		err = sys_reboot(tf->tf_a0);
@@ -109,7 +113,89 @@
 				 (userptr_t)tf->tf_a1);
 		break;
 
-	    /* Add stuff here */
+
+	    /* file calls */
+
+	    case SYS_open:
+		err = sys_open(
+			(userptr_t)tf->tf_a0,
+			tf->tf_a1,
+			tf->tf_a2,
+			&retval);
+		break;
+
+	    case SYS_dup2:
+		err = sys_dup2(
+			tf->tf_a0,
+			tf->tf_a1,
+			&retval);
+		break;
+
+	    case SYS_close:
+		err = sys_close(tf->tf_a0);
+		break;
+
+	    case SYS_read:
+		err = sys_read(
+			tf->tf_a0,
+			(userptr_t)tf->tf_a1,
+			tf->tf_a2,
+			&retval);
+		break;
+	    case SYS_write:
+		err = sys_write(
+			tf->tf_a0,
+			(userptr_t)tf->tf_a1,
+			tf->tf_a2,
+			&retval);
+		break;
+	    case SYS_lseek:
+		{
+			/*
+			 * Because the position argument is 64 bits wide,
+			 * it goes in the a2/a3 registers and we have to
+			 * get "whence" from the stack. Furthermore, the
+			 * return value is 64 bits wide, so the extra
+			 * part of it goes in the v1 register.
+			 *
+			 * This is a trifle messy.
+			 */
+			uint64_t offset;
+			int whence;
+			off_t retval64;
+
+			join32to64(tf->tf_a2, tf->tf_a3, &offset);
+
+			err = copyin((userptr_t)tf->tf_sp + 16,
+				     &whence, sizeof(int));
+			if (err) {
+				break;
+			}
+
+			err = sys_lseek(tf->tf_a0, offset, whence, &retval64);
+			if (err) {
+				break;
+			}
+
+			split64to32(retval64, &tf->tf_v0, &tf->tf_v1);
+			retval = tf->tf_v0;
+		}
+		break;
+
+	    case SYS_chdir:
+		err = sys_chdir((userptr_t)tf->tf_a0);
+		break;
+
+	    case SYS___getcwd:
+		err = sys___getcwd(
+			(userptr_t)tf->tf_a0,
+			tf->tf_a1,
+			&retval);
+		break;
+
+
+	    /* Even more system calls will go here */
+
 
 	    default:
 		kprintf("Unknown syscall %d\n", callno);
diff -r bed1817e4048 -r c068f74d7670 kern/conf/conf.kern
--- a/kern/conf/conf.kern	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/conf/conf.kern	Wed Sep 24 21:07:31 2014 -0400
@@ -377,6 +377,7 @@
 file      syscall/loadelf.c
 file      syscall/openfile.c
 file      syscall/runprogram.c
+file      syscall/file_syscalls.c
 file      syscall/time_syscalls.c
 
 #
diff -r bed1817e4048 -r c068f74d7670 kern/include/proc.h
--- a/kern/include/proc.h	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/include/proc.h	Wed Sep 24 21:07:31 2014 -0400
@@ -55,6 +55,7 @@
 
 	/* VFS */
 	struct vnode *p_cwd;		/* current working directory */
+	struct filetable *p_filetable;	/* table of open files */
 
 	/* add more material here as needed */
 };
@@ -68,6 +69,9 @@
 /* Create a fresh process for use by runprogram(). */
 struct proc *proc_create_runprogram(const char *name);
 
+/* Create a fresh process for use by fork() */
+int proc_fork(struct proc **ret);
+
 /* Destroy a process. */
 void proc_destroy(struct proc *proc);
 
diff -r bed1817e4048 -r c068f74d7670 kern/include/syscall.h
--- a/kern/include/syscall.h	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/include/syscall.h	Wed Sep 24 21:07:31 2014 -0400
@@ -54,9 +54,23 @@
 
 /*
  * Prototypes for IN-KERNEL entry points for system call implementations.
+ *
+ * Note that we use userptr_t's for userspace pointers, so that there
+ * isn't any confusion about what space the pointers are in.
  */
 
 int sys_reboot(int code);
 int sys___time(userptr_t user_seconds, userptr_t user_nanoseconds);
 
+int sys_open(const_userptr_t filename, int flags, mode_t mode, int *retval);
+int sys_dup2(int oldfd, int newfd, int *retval);
+int sys_close(int fd);
+int sys_read(int fd, userptr_t buf, size_t size, int *retval);
+int sys_write(int fd, userptr_t buf, size_t size, int *retval);
+int sys_lseek(int fd, off_t offset, int code, off_t *retval);
+
+int sys_chdir(const_userptr_t path);
+int sys___getcwd(userptr_t buf, size_t buflen, int *retval);
+
+
 #endif /* _SYSCALL_H_ */
diff -r bed1817e4048 -r c068f74d7670 kern/include/uio.h
--- a/kern/include/uio.h	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/include/uio.h	Wed Sep 24 21:07:31 2014 -0400
@@ -138,5 +138,11 @@
 void uio_kinit(struct iovec *, struct uio *,
 	       void *kbuf, size_t len, off_t pos, enum uio_rw rw);
 
+/*
+ * The same, except for a buffer coming from user space.
+ */
+void uio_uinit(struct iovec *, struct uio *,
+	       userptr_t ubuf, size_t len, off_t pos, enum uio_rw rw);
+
 
 #endif /* _UIO_H_ */
diff -r bed1817e4048 -r c068f74d7670 kern/lib/uio.c
--- a/kern/lib/uio.c	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/lib/uio.c	Wed Sep 24 21:07:31 2014 -0400
@@ -163,3 +163,25 @@
 	u->uio_rw = rw;
 	u->uio_space = NULL;
 }
+
+/*
+ * Set up a uio for a userspace transfer.
+ */
+
+void
+uio_uinit(struct iovec *iov, struct uio *u,
+	  userptr_t buf, size_t len, off_t offset, enum uio_rw rw)
+{
+	DEBUGASSERT(iov != NULL);
+	DEBUGASSERT(u != NULL);
+
+	iov->iov_ubase = buf;
+	iov->iov_len = len;
+	u->uio_iov = iov;
+	u->uio_iovcnt = 1;
+	u->uio_offset = offset;
+	u->uio_resid = len;
+	u->uio_segflg = UIO_USERSPACE;
+	u->uio_rw = rw;
+	u->uio_space = proc_getas();
+}
diff -r bed1817e4048 -r c068f74d7670 kern/main/main.c
--- a/kern/main/main.c	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/main/main.c	Wed Sep 24 21:07:31 2014 -0400
@@ -98,7 +98,7 @@
 
 	kprintf("\n");
 	kprintf("OS/161 base system version %s\n", BASE_VERSION);
-	kprintf("(with locks&CVs solution)\n");
+	kprintf("(with locks/CVs, file system calls solutions)\n");
 	kprintf("%s", harvard_copyright);
 	kprintf("\n");
 
diff -r bed1817e4048 -r c068f74d7670 kern/proc/proc.c
--- a/kern/proc/proc.c	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/proc/proc.c	Wed Sep 24 21:07:31 2014 -0400
@@ -43,11 +43,13 @@
  */
 
 #include <types.h>
+#include <kern/errno.h>
 #include <spl.h>
 #include <proc.h>
 #include <current.h>
 #include <addrspace.h>
 #include <vnode.h>
+#include <filetable.h>
 
 /*
  * The process for the kernel; this holds all the kernel-only threads.
@@ -81,6 +83,7 @@
 
 	/* VFS fields */
 	proc->p_cwd = NULL;
+	proc->p_filetable = NULL;
 
 	return proc;
 }
@@ -116,6 +119,10 @@
 		VOP_DECREF(proc->p_cwd);
 		proc->p_cwd = NULL;
 	}
+	if (proc->p_filetable) {
+		filetable_destroy(proc->p_filetable);
+		proc->p_filetable = NULL;
+	}
 
 	/* VM fields */
 	if (proc->p_addrspace) {
@@ -189,6 +196,9 @@
  *
  * It will have no address space and will inherit the current
  * process's (that is, the kernel menu's) current directory.
+ *
+ * It will be given no filetable. The filetable will be initialized in
+ * runprogram().
  */
 struct proc *
 proc_create_runprogram(const char *name)
@@ -222,6 +232,55 @@
 }
 
 /*
+ * Clone the current process.
+ *
+ * The new thread is given a copy of the caller's file handles if RET
+ * is not null. (If RET is null, what we're creating is a kernel-only
+ * thread and it doesn't need an address space or file handles.)
+ * However, the new thread always inherits its current working
+ * directory from the caller. The new thread is given no address space
+ * (the caller decides that).
+ */
+int
+proc_fork(struct proc **ret)
+{
+	struct proc *proc;
+	struct filetable *tbl;
+	int result;
+
+	proc = proc_create(curproc->p_name);
+	if (proc == NULL) {
+		return ENOMEM;
+	}
+
+	/* VM fields */
+	/* do not clone address space -- let caller decide on that */
+
+	/* VFS fields */
+	tbl = curproc->p_filetable;
+	if (tbl != NULL) {
+		result = filetable_copy(tbl, &proc->p_filetable);
+		if (result) {
+			as_destroy(proc->p_addrspace);
+			proc->p_addrspace = NULL;
+			proc_destroy(proc);
+			return result;
+		}
+	}
+
+	spinlock_acquire(&curproc->p_lock);
+	/* we don't need to lock proc->p_lock as we have the only reference */
+	if (curproc->p_cwd != NULL) {
+		VOP_INCREF(curproc->p_cwd);
+		proc->p_cwd = curproc->p_cwd;
+	}
+	spinlock_release(&curproc->p_lock);
+
+	*ret = proc;
+	return 0;
+}
+
+/*
  * Add a thread to a process. Either the thread or the process might
  * or might not be current.
  *
diff -r bed1817e4048 -r c068f74d7670 kern/syscall/file_syscalls.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/kern/syscall/file_syscalls.c	Wed Sep 24 21:07:31 2014 -0400
@@ -0,0 +1,381 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2014
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * File-related system call implementations.
+ */
+
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/fcntl.h>
+#include <kern/limits.h>
+#include <kern/seek.h>
+#include <kern/stat.h>
+#include <lib.h>
+#include <uio.h>
+#include <proc.h>
+#include <current.h>
+#include <synch.h>
+#include <copyinout.h>
+#include <vfs.h>
+#include <vnode.h>
+#include <openfile.h>
+#include <filetable.h>
+#include <syscall.h>
+
+/*
+ * open() - get the path with copyinstr, then use openfile_open and
+ * filetable_place to do the real work.
+ */
+int
+sys_open(const_userptr_t upath, int flags, mode_t mode, int *retval)
+{
+	const int allflags =
+		O_ACCMODE | O_CREAT | O_EXCL | O_TRUNC | O_APPEND | O_NOCTTY;
+
+	char *kpath;
+	struct openfile *file;
+	int result;
+
+	if ((flags & allflags) != flags) {
+		/* unknown flags were set */
+		return EINVAL;
+	}
+
+	kpath = kmalloc(PATH_MAX);
+	if (kpath == NULL) {
+		return ENOMEM;
+	}
+
+	/* Get the pathname. */
+	result = copyinstr(upath, kpath, PATH_MAX, NULL);
+	if (result) {
+		kfree(kpath);
+		return result;
+	}
+
+	/*
+	 * Open the file. Code lower down (in vfs_open) checks that
+	 * flags & O_ACCMODE is a valid value.
+	 */
+	result = openfile_open(kpath, flags, mode, &file);
+	if (result) {
+		kfree(kpath);
+		return result;
+	}
+	kfree(kpath);
+
+	/*
+	 * Place the file in our process's file table, which gives us
+	 * the result file descriptor.
+	 */
+	result = filetable_place(curproc->p_filetable, file, retval);
+	if (result) {
+		openfile_decref(file);
+		return result;
+	}
+
+	return 0;
+}
+
+/*
+ * Common logic for read and write.
+ *
+ * Look up the fd, then use VOP_READ or VOP_WRITE.
+ */
+static
+int
+sys_readwrite(int fd, userptr_t buf, size_t size, enum uio_rw rw,
+	      int badaccmode, ssize_t *retval)
+{
+	struct openfile *file;
+	bool locked;
+	off_t pos;
+	struct iovec iov;
+	struct uio useruio;
+	int result;
+
+	/* better be a valid file descriptor */
+	result = filetable_get(curproc->p_filetable, fd, &file);
+	if (result) {
+		return result;
+	}
+
+	/* Only lock the seek position if we're really using it. */
+	locked = VOP_ISSEEKABLE(file->of_vnode);
+	if (locked) {
+		lock_acquire(file->of_offsetlock);
+		pos = file->of_offset;
+	}
+	else {
+		pos = 0;
+	}
+
+	if (file->of_accmode == badaccmode) {
+		result = EBADF;
+		goto fail;
+	}
+
+	/* set up a uio with the buffer, its size, and the current offset */
+	uio_uinit(&iov, &useruio, buf, size, pos, rw);
+
+	/* do the read or write */
+	result = (rw == UIO_READ) ?
+		VOP_READ(file->of_vnode, &useruio) :
+		VOP_WRITE(file->of_vnode, &useruio);
+	if (result) {
+		goto fail;
+	}
+
+	if (locked) {
+		/* set the offset to the updated offset in the uio */
+		file->of_offset = useruio.uio_offset;
+		lock_release(file->of_offsetlock);
+	}
+
+	filetable_put(curproc->p_filetable, fd, file);
+
+	/*
+	 * The amount read (or written) is the original buffer size,
+	 * minus how much is left in it.
+	 */
+	*retval = size - useruio.uio_resid;
+
+	return 0;
+
+fail:
+	if (locked) {
+		lock_release(file->of_offsetlock);
+	}
+	filetable_put(curproc->p_filetable, fd, file);
+	return result;
+}
+
+/*
+ * read() - use sys_readwrite
+ */
+int
+sys_read(int fd, userptr_t buf, size_t size, int *retval)
+{
+	return sys_readwrite(fd, buf, size, UIO_READ, O_WRONLY, retval);
+}
+
+/*
+ * write() - use sys_readwrite
+ */
+int
+sys_write(int fd, userptr_t buf, size_t size, int *retval)
+{
+	return sys_readwrite(fd, buf, size, UIO_WRITE, O_RDONLY, retval);
+}
+
+/*
+ * close() - remove from the file table.
+ */
+int
+sys_close(int fd)
+{
+	struct filetable *ft;
+	struct openfile *file;
+
+	ft = curproc->p_filetable;
+
+	/* check if the file's in range before calling placeat */
+	if (!filetable_okfd(ft, fd)) {
+		return EBADF;
+	}
+
+	/* place null in the filetable and get the file previously there */
+	filetable_placeat(ft, NULL, fd, &file);
+
+	if (file == NULL) {
+		/* oops, it wasn't open, that's an error */
+		return EBADF;
+	}
+
+	/* drop the reference */
+	openfile_decref(file);
+	return 0;
+}
+
+/*
+ * lseek() - manipulate the seek position.
+ */
+int
+sys_lseek(int fd, off_t offset, int whence, off_t *retval)
+{
+	struct stat info;
+	struct openfile *file;
+	int result;
+
+	/* Get the open file. */
+	result = filetable_get(curproc->p_filetable, fd, &file);
+	if (result) {
+		return result;
+	}
+
+	/* If it's not a seekable object, forget about it. */
+	if (!VOP_ISSEEKABLE(file->of_vnode)) {
+		filetable_put(curproc->p_filetable, fd, file);
+		return ESPIPE;
+	}
+
+	/* Lock the seek position. */
+	lock_acquire(file->of_offsetlock);
+
+	/* Compute the new position. */
+	switch (whence) {
+	    case SEEK_SET:
+		*retval = offset;
+		break;
+	    case SEEK_CUR:
+		*retval = file->of_offset + offset;
+		break;
+	    case SEEK_END:
+		result = VOP_STAT(file->of_vnode, &info);
+		if (result) {
+			lock_release(file->of_offsetlock);
+			filetable_put(curproc->p_filetable, fd, file);
+			return result;
+		}
+		*retval = info.st_size + offset;
+		break;
+	    default:
+		lock_release(file->of_offsetlock);
+		filetable_put(curproc->p_filetable, fd, file);
+		return EINVAL;
+	}
+
+	/* If the resulting position is negative (which is invalid) fail. */
+	if (*retval < 0) {
+		lock_release(file->of_offsetlock);
+		filetable_put(curproc->p_filetable, fd, file);
+		return EINVAL;
+	}
+
+	/* Success -- update the file structure with the new position. */
+	file->of_offset = *retval;
+
+	lock_release(file->of_offsetlock);
+	filetable_put(curproc->p_filetable, fd, file);
+
+	return 0;
+}
+
+/*
+ * dup2() - clone a file descriptor.
+ */
+int
+sys_dup2(int oldfd, int newfd, int *retval)
+{
+	struct filetable *ft;
+	struct openfile *oldfdfile, *newfdfile;
+	int result;
+
+	ft = curproc->p_filetable;
+
+	if (!filetable_okfd(ft, newfd)) {
+		return EBADF;
+	}
+
+	/* dup2'ing an fd to itself automatically succeeds (BSD semantics) */
+	if (oldfd == newfd) {
+		*retval = newfd;
+		return 0;
+	}
+
+	/* get the file */
+	result = filetable_get(ft, oldfd, &oldfdfile);
+	if (result) {
+		return result;
+	}
+
+	/* make another reference and return the fd */
+	openfile_incref(oldfdfile);
+	filetable_put(ft, oldfd, oldfdfile);
+
+	/* place it */
+	filetable_placeat(ft, oldfdfile, newfd, &newfdfile);
+
+	/* if there was a file already there, drop that reference */
+	if (newfdfile != NULL) {
+		openfile_decref(newfdfile);
+	}
+
+	/* return newfd */
+	*retval = newfd;
+	return 0;
+}
+
+/*
+ * chdir() - change directory. Send the path off to the vfs layer.
+ */
+int
+sys_chdir(const_userptr_t path)
+{
+	char *pathbuf;
+	int result;
+
+	pathbuf = kmalloc(PATH_MAX);
+	if (pathbuf == NULL) {
+		return ENOMEM;
+	}
+
+	result = copyinstr(path, pathbuf, PATH_MAX, NULL);
+	if (result) {
+		kfree(pathbuf);
+		return result;
+	}
+
+	result = vfs_chdir(pathbuf);
+	kfree(pathbuf);
+	return result;
+}
+
+/*
+ * __getcwd() - get current directory. Make a uio and get the data
+ * from the VFS code.
+ */
+int
+sys___getcwd(userptr_t buf, size_t buflen, int *retval)
+{
+	struct iovec iov;
+	struct uio useruio;
+	int result;
+
+	uio_uinit(&iov, &useruio, buf, buflen, 0, UIO_READ);
+
+	result = vfs_getcwd(&useruio);
+	if (result) {
+		return result;
+	}
+
+	*retval = buflen - useruio.uio_resid;
+	return 0;
+}
diff -r bed1817e4048 -r c068f74d7670 kern/syscall/runprogram.c
--- a/kern/syscall/runprogram.c	Wed Sep 24 21:03:08 2014 -0400
+++ b/kern/syscall/runprogram.c	Wed Sep 24 21:07:31 2014 -0400
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2014
  *	The President and Fellows of Harvard College.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -36,16 +36,83 @@
 #include <types.h>
 #include <kern/errno.h>
 #include <kern/fcntl.h>
+#include <kern/unistd.h>
 #include <lib.h>
 #include <proc.h>
 #include <current.h>
 #include <addrspace.h>
 #include <vm.h>
 #include <vfs.h>
+#include <openfile.h>
+#include <filetable.h>
 #include <syscall.h>
 #include <test.h>
 
 /*
+ * Open a file on a selected file descriptor. Takes care of various
+ * minutiae, like the vfs-level open destroying pathnames.
+ */
+static
+int
+placed_open(const char *path, int openflags, int fd)
+{
+	struct openfile *newfile, *oldfile;
+	char mypath[32];
+	int result;
+
+	/*
+	 * The filename comes from the kernel, in fact right in this
+	 * file; assume reasonable length. But make sure we fit.
+	 */
+	KASSERT(strlen(path) < sizeof(mypath));
+	strcpy(mypath, path);
+
+	result = openfile_open(mypath, openflags, 0664, &newfile);
+	if (result) {
+		return result;
+	}
+
+	/* place the file in the filetable in the right slot */
+	filetable_placeat(curproc->p_filetable, newfile, fd, &oldfile);
+
+	/* the table should previously have been empty */
+	KASSERT(oldfile == NULL);
+
+	return 0;
+}
+
+/*
+ * Open the standard file descriptors: stdin, stdout, stderr.
+ *
+ * Note that if we fail part of the way through we can leave the fds
+ * we've already opened in the file table and they'll get cleaned up
+ * by process exit.
+ */
+static
+int
+open_stdfds(const char *inpath, const char *outpath, const char *errpath)
+{
+	int result;
+
+	result = placed_open(inpath, O_RDONLY, STDIN_FILENO);
+	if (result) {
+		return result;
+	}
+
+	result = placed_open(outpath, O_WRONLY, STDOUT_FILENO);
+	if (result) {
+		return result;
+	}
+
+	result = placed_open(errpath, O_WRONLY, STDERR_FILENO);
+	if (result) {
+		return result;
+	}
+
+	return 0;
+}
+
+/*
  * Load program "progname" and start running it in usermode.
  * Does not return except on error.
  *
@@ -68,6 +135,21 @@
 	/* We should be a new process. */
 	KASSERT(proc_getas() == NULL);
 
+	/* Set up stdin/stdout/stderr if necessary. */
+	if (curproc->p_filetable == NULL) {
+		curproc->p_filetable = filetable_create();
+		if (curproc->p_filetable == NULL) {
+			vfs_close(v);
+			return ENOMEM;
+		}
+
+		result = open_stdfds("con:", "con:", "con:");
+		if (result) {
+			vfs_close(v);
+			return result;
+		}
+	}
+
 	/* Create a new address space. */
 	as = as_create();
 	if (as == NULL) {
