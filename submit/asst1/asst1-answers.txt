sys161: System/161 release 2.0.3, compiled Aug 10 2015 13:31:07

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #1)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]: 

commit fff2d1b6c78a3ad88eb410f5d7ce063038a399c3 (HEAD -> master, tag: asst1-start, origin/master)
Author: Zachary Choo <zachchoo@ssh-linux3.ece.ubc.ca>
Date:   Sun Sep 19 21:45:58 2021 -0700

    Initial commit of os161 for CPEN331

asst1-start

1. The first line of code that is executed is in the file kern/arch/mips/locore/exception-mips1.S; it is either the line j common_exception under mips_utlb_handler if it is a UTLB exception, or j common_exception under mips_general_handler if it is a general exeption.

After that common_exception calls mips_trap in kern/arch/mips/locore/trap.c, which will then further handle the exeption based on if it is an interrupt, system call, etc.

From kern/arch/mips/locore/trap.c, it seems like the interrupt is treated like just another trap, so it doenst seem like it differs.

2. userland/lib/libc/arch/mips/syscalls-mips.S:   syscall in line 84

3. it is so that both the user level programs and the kernel can make these function calls

4. in configure, we see it configures PLATFORM to 'sys161' and MACHINE to 'mips'. It would be invalidated if you wanted a different hardware platform or machine type

5. Some machines are different, one example is how many registers are in the machine. Code that relies on certain registers will not work on a computer with a different register setup. By creating a separation, much of the code would no longer depend on the machine, and the parts that are can be easily isolated and changed.

6. as seen in kern/arch/mips/include/trapframe.h, the trapframe struct has 37 uint32_ts (starting at line 41 and ending at line 77), which works out to 37*4=148 bytes. It is this big so that it can store the values in all 37 registers for the exeption handler.

7. In kern/conf/conf.kern it states kern/conf/conf.kern: To add new files to the system, you need to edit this file (or others like it) and rerun the config script. So you should rerun it when adding new files.

8. After you configure DUMBVM, or change the header files.

9. Whenever you need to recompile the kernel. 

10. In kern/main/menu.c you would have to make the function, then add it to the cmdtable array. You could also display it in the menu by adding it to the opsmenu or mainmenu or whichever array, but I don't think that's necessary.

11. it is on a virtual machine that has mips hardware, and thus does not know to the proper functions for "ls"ing in said hardware, for example.

12. the code in userland/lib/crt0/mips/crt0.S regains control when main returns. It puts the return value of main in registers v0, s0 and then a0.

13. we would have to add the syscall and a call number to kern/include/kern/syscall.h, add the function prototype to kern/include/syscall.h, add the code for the function in the file kern/syscall, and add it to the case statement in kern/arch/mips/syscall/syscall.c. Since we added a new file, we need to re-run the kern/conf/config script, which means we need to re-run bmake depend as well. Then we need to rebuild and install the kernel.

14. boot() in kmain which does kprintf("\n");

15. it is __start () at kern/arch/sys161/main/start.S which does addiu sp, sp, -24

16.
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x800139e4 in kmain at ../../main/main.c:211
2       breakpoint     keep y   0x800143a0 in showmenu at ../../main/menu.c:415

17. The return address register is saved and the stack frame is made. The loader then sets up a boot stack for the first processor, and the kernel is loaded at virtual address 0x80000200. Then the stack frame is set up on the real kernel stack. The exception handler code is copied onto the first page of memory. The instruction cache is flushed, the TLB is initialized, NULL is loaded into the curthread register, and the status register is set up. The CPU number is loaded into the PTBASE field of the CONTEXT register, and finally the GP register is loaded.

18. In kern/arch/sys161/main/start.S:   jal kmain

19.
211             boot();
(gdb) s
boot () at ../../main/main.c:99
99              kprintf("\n");
(gdb) n
100             kprintf("OS/161 base system version %s\n", BASE_VERSION);
(gdb) n
101             kprintf("%s", harvard_copyright);
(gdb) n
102             kprintf("\n");
(gdb) n
104             kprintf("Put-your-group-name-here's system version %s (%s #%d)\n",
(gdb) n
106             kprintf("\n");
(gdb) n
109             ram_bootstrap();
(gdb) n
110             proc_bootstrap();
(gdb) n
111             thread_bootstrap();
(gdb) n
112             hardclock_bootstrap();
(gdb) n
113             vfs_bootstrap();
(gdb) n
114             kheap_nextgeneration();
(gdb) n
117             kprintf("Device probe...\n");
(gdb) n
118             KASSERT(curthread->t_curspl > 0);
(gdb) n
119             mainbus_bootstrap();
(gdb) n
120             KASSERT(curthread->t_curspl == 0);
(gdb) n
122             pseudoconfig();
(gdb) n
123             kprintf("\n");
(gdb) n
124             kheap_nextgeneration();
(gdb) n
127             vm_bootstrap();
(gdb) n
128             kprintf_bootstrap();
(gdb) n
129             thread_start_cpus();
(gdb) n
132             vfs_setbootfs("emu0");
(gdb) n
134             kheap_nextgeneration();
(gdb) n
141     }

20.
357             cpuarray_init(&allcpus);
(gdb) p *bootcpu
Cannot access memory at address 0x80000

21.
367             bootcpu = cpu_create(0);
(gdb) n
368             bootthread = bootcpu->c_curthread;
(gdb) p *bootcpu
$1 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tl\
n_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks\
 = 0, c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = \
{tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0}, c_ipi_\
pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {splk_lock = 0, splk_holder =\
 0x0}}

22.
(gdb) cpuarray allcpus
0 cpus

23.
(gdb) cpuarray allcpus
1 cpus
cpu 0:
$1 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tl\
n_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks\
 = 1, c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = \
{tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0}, c_ipi_\
pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {splk_lock = 0, splk_holder =\
 0x0}}